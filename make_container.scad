/*

 program to make containers from a
simple motif generated by module triangles_36()
- the module makes a triangle of triangles
i.e. 36 triangles in a triangular array
6 arrays are used to make the base of the container
and 3 arrays are used for each side

running the openSCAD code
involves setting a few parameters and
observing the effect with F5 button - it's
quicker than calculating required
numbers.

parameters

l, w, and h length width and height
            of basic rod (l + 8% overlap)

trans_s   side translation to position walls

scale_prism  scale prism to remove excess wall

trans_cyl    translate cylinder to remove
             wall to set height of container

base_scale  scale to make small adjustment
            in size of base

parameters for small box

 l = 8;
  w = 1.5;
  h = 2;
 trans_s = 40.4;
 scale_prism = 4.9;
 trans_cyl = -53.5;
 base_scale = 1.0;

parameters for medium box

l = 10;
 w = 2;
 h = 2;
 trans_s = 51.;
 scale_prism = 6.12;
 trans_cyl = -52;
 base_scale = 1.0;

parameters for large box

 l = 10;
 w = 2;
 h = 2;
 trans_s = 51.;
 scale_prism = 6.12;
 trans_cyl = 50;
 base_scale = 1.0;

parameters for lid

l = 10;
w = 2;
h = 2;
trans_s = 55;
scale_prism = 6.6;
trans_cyl = -43.5;
base_scale = 1.08;


parameters for extra large box

l = 10;
w = 2;
h = 2;
trans_s = 55;
scale_prism = 6.6;
trans_cyl = 50;
base_scale = 1.08;

pcm

*/




l = 10;
w = 2;
h = 2;
trans_s = 55;
scale_prism = 6.6;
trans_cyl = 50;
base_scale = 1.08;



// start of code

difference()
{

union()
{
translate([0,0,-0.1])
scale([base_scale,base_scale,1])
rotate([0,0,30])
   for  ( i =[
         [0,0,60],[0,0,120],[0,0,180],
         [0,0,240],[0,0,300],[0,0,0],
        ])
{
         rotate(i)
          triangles_36();
}


intersection()
{

rotate([0,0,30])
scale ([scale_prism,scale_prism,15])
hexagonal_prism();


for ( j = [

     [0,90,0],[0,90,60],[0,90,120],
     [0,90,180],[0,90,240],[0,90,300],
    ])
{
   rotate(j)
   translate([0,0,trans_s])
   rotate([0,0,30])
   for  ( i =[
    [0,0,0],[0,0,60],[0,0,120],
              ])


 {
         rotate(i)
          triangles_36();
}
}
}
}

translate ([0,0,trans_cyl])
cylinder(r=80,h=50,center=true);
}





// end of code - modules below




module triangles_36()
{

/* makes a triangle of triangles -
 from fortran program "turtle"
 which outputs openSCAD code
*/



translate([-2*l,-5*(sqrt(3)/2)*l,0])
linear_extrude(height=h)
   union()
   {

 translate([   -0.25000*l,  -0.43301*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([   -0.50000*l,  -0.86603*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([   -0.75000*l,  -0.43301*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    0.25000*l,  -0.43301*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    0.75000*l,  -0.43301*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    0.50000*l,  -0.86603*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    1.25000*l,  -0.43301*l,0])
 rotate([0,0,        240.])   //      300.
   line(l,w);

 translate([    1.75000*l,  -0.43301*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

 translate([    1.50000*l,  -0.86603*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    2.25000*l,  -0.43301*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    2.75000*l,  -0.43301*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    2.50000*l,  -0.86603*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    3.25000*l,  -0.43301*l,0])
 rotate([0,0,        240.])   //      300.
   line(l,w);

 translate([    3.75000*l,  -0.43301*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

 translate([    3.50000*l,  -0.86603*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    4.25000*l,  -0.43301*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    4.75000*l,  -0.43301*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    4.50000*l,  -0.86603*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    4.00000*l,   0.00000*l,0])
 rotate([0,0,        180.])   //      240.
   line(l,w);

 translate([    3.75000*l,   0.43301*l,0])
 rotate([0,0,        240.])   //      180.
   line(l,w);

 translate([    4.25000*l,   0.43301*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

 translate([    3.25000*l,   0.43301*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    3.00000*l,   0.00000*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    2.75000*l,   0.43301*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    2.25000*l,   0.43301*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    2.00000*l,   0.00000*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    1.75000*l,   0.43301*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    1.25000*l,   0.43301*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    1.00000*l,   0.00000*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    0.75000*l,   0.43301*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    0.25000*l,   0.43301*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    0.00000*l,   0.00000*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([   -0.25000*l,   0.43301*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    0.50000*l,   0.86603*l,0])
 rotate([0,0,          0.])   //       60.
   line(l,w);

 translate([    0.25000*l,   1.29904*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    0.75000*l,   1.29904*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    1.25000*l,   1.29904*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    1.75000*l,   1.29904*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    1.50000*l,   0.86603*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    2.25000*l,   1.29904*l,0])
 rotate([0,0,        240.])   //      300.
   line(l,w);

 translate([    2.75000*l,   1.29904*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

 translate([    2.50000*l,   0.86603*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    3.25000*l,   1.29904*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    3.75000*l,   1.29904*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    3.50000*l,   0.86603*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    3.00000*l,   1.73205*l,0])
 rotate([0,0,        180.])   //      240.
   line(l,w);

 translate([    2.75000*l,   2.16506*l,0])
 rotate([0,0,        240.])   //      180.
   line(l,w);

 translate([    3.25000*l,   2.16506*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

 translate([    2.25000*l,   2.16506*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    2.00000*l,   1.73205*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    1.75000*l,   2.16506*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    1.25000*l,   2.16506*l,0])
 rotate([0,0,        300.])   //        0.
   line(l,w);

 translate([    1.00000*l,   1.73205*l,0])
 rotate([0,0,          0.])   //      300.
   line(l,w);

 translate([    0.75000*l,   2.16506*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    1.75000*l,   2.16506*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    1.50000*l,   2.59808*l,0])
 rotate([0,0,          0.])   //       60.
   line(l,w);

 translate([    1.25000*l,   3.03109*l,0])
 rotate([0,0,         60.])   //        0.
   line(l,w);

 translate([    1.75000*l,   3.03109*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    2.25000*l,   3.03109*l,0])
 rotate([0,0,         60.])   //      120.
   line(l,w);

 translate([    2.75000*l,   3.03109*l,0])
 rotate([0,0,        120.])   //       60.
   line(l,w);

 translate([    2.50000*l,   2.59808*l,0])
 rotate([0,0,        180.])   //      120.
   line(l,w);

 translate([    2.00000*l,   3.46410*l,0])
 rotate([0,0,        180.])   //      240.
   line(l,w);

 translate([    1.75000*l,   3.89711*l,0])
 rotate([0,0,        240.])   //      180.
   line(l,w);

 translate([    2.25000*l,   3.89711*l,0])
 rotate([0,0,        300.])   //      240.
   line(l,w);

    }
}

 module line(l,w)
    {
     square([1.08*l,w],center=true);
    }

module hexagonal_prism()
{

/*
  hexagonal prism
*/

rotate([0,60,0])
polyhedron
       (points = [
                 [  -9.33013,   0.00000,  -6.16025],
                 [  -6.83013,  -8.66025,  -1.83013],
                 [  -6.83013,   8.66025,  -1.83013],
                 [  -1.83013,  -8.66025,   6.83013],
                 [  -1.83013,   8.66025,   6.83013],
                 [  -0.66988,   0.00000, -11.16025],
                 [   0.66987,   0.00000,  11.16025],
                 [   1.83012,  -8.66025,  -6.83013],
                 [   1.83012,   8.66025,  -6.83013],
                 [   6.83012,  -8.66025,   1.83013],
                 [   6.83012,   8.66025,   1.83013],
                 [   9.33012,   0.00000,   6.16025],
                ],
           triangles = [
                 [    7,    9,   10],[    8,    7,   10],
                 [    7,    8,    5],[   11,   10,    9],
                 [    3,    1,    2],[    4,    3,    2],
                 [    3,    4,    6],[    0,    2,    1],
                 [    8,    2,    0],[    8,    0,    5],
                 [    5,    0,    1],[    5,    1,    7],
                 [    7,    1,    3],[    7,    3,    9],
                 [    9,    3,    6],[    9,    6,   11],
                 [   11,    6,    4],[   11,    4,   10],
                 [   10,    4,    2],[   10,    2,    8],
                 ]
      );
}
